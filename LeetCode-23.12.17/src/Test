LeetCode209.长度最小的子数组
class Solution {
    public int minSubArrayLen(int target, int[] nums)
    {
        int n = nums.length,sum = 0,len = Integer.MAX_VALUE;
        for(int left=0,right=0; right < n; right++)
        {
            sum += nums[right];//进窗口
            while(sum >= target)//判断
            {
                len = Math.min(len,right - left + 1);//更新结果
                sum -= nums[left++];//出窗口
            }
        }
        return len == Integer.MAX_VALUE?0 : len;
    }
}


LeetCode3.无重复字符的最长子串
class Solution {
    public int lengthOfLongestSubstring(String ss) {
        char[] s = ss.toCharArray();
        int[] hash = new int[128]; //用数组模拟哈希表
        int left = 0,right = 0,n = ss.length();
        int ret = 0;
        while(right < n)
        {
            hash[s[right]]++; // 进入窗口
            while(hash[s[right]] > 1) // 判断
            {
                hash[s[left++]]--; // 出窗口
            }
            ret = Math.max(ret,right - left + 1);//更新结果
            right++;
        }
        return ret;
    }
}


LeetCode1004.最大连续1的个数 III
class Solution {
    public int longestOnes(int[] nums, int k) {
        int ret = 0;
        for(int left = 0,right = 0, zero = 0; right < nums.length; right++)
        {
            if(nums[right] == 0) zero++;//进窗口
            while(zero > k) //判断
            {
                if(nums[left++] == 0) zero--; //出窗口
            }
            ret = Math.max(ret,right - left + 1);
        }
        return ret;
    }
}


LeetCode1658.将 x 减到 0 的最小操作数
class Solution {
    public int minOperations(int[] nums, int x) {
        int sum = 0;
        for(int a : nums) sum += a;
        int target = sum - x;
        //处理细节
        if(target < 0) return -1;

        int ret = -1;
        for(int left = 0, right = 0, tmp = 0; right < nums.length; right++)
        {
            tmp += nums[right]; // 进窗口
            while(tmp > target) // 判断
                tmp -= nums[left++]; // 出窗口
            if(tmp == target)
                ret = Math.max(ret,right - left + 1);// 更新结果
        }
        if(ret == -1) return ret;
        else return nums.length - ret;
    }
}