LeetCode209.长度最小的子数组
class Solution {
    public int minSubArrayLen(int target, int[] nums)
    {
        int n = nums.length,sum = 0,len = Integer.MAX_VALUE;
        for(int left=0,right=0; right < n; right++)
        {
            sum += nums[right];//进窗口
            while(sum >= target)//判断
            {
                len = Math.min(len,right - left + 1);//更新结果
                sum -= nums[left++];//出窗口
            }
        }
        return len == Integer.MAX_VALUE?0 : len;
    }
}


LeetCode3.无重复字符的最长子串
class Solution {
    public int lengthOfLongestSubstring(String ss) {
        char[] s = ss.toCharArray();
        int[] hash = new int[128]; //用数组模拟哈希表
        int left = 0,right = 0,n = ss.length();
        int ret = 0;
        while(right < n)
        {
            hash[s[right]]++; // 进入窗口
            while(hash[s[right]] > 1) // 判断
            {
                hash[s[left++]]--; // 出窗口
            }
            ret = Math.max(ret,right - left + 1);//更新结果
            right++;
        }
        return ret;
    }
}


LeetCode1004.最大连续1的个数 III
class Solution {
    public int longestOnes(int[] nums, int k) {
        int ret = 0;
        for(int left = 0,right = 0, zero = 0; right < nums.length; right++)
        {
            if(nums[right] == 0) zero++;//进窗口
            while(zero > k) //判断
            {
                if(nums[left++] == 0) zero--; //出窗口
            }
            ret = Math.max(ret,right - left + 1);
        }
        return ret;
    }
}


LeetCode1658.将 x 减到 0 的最小操作数
class Solution {
    public int minOperations(int[] nums, int x) {
        int sum = 0;
        for(int a : nums) sum += a;
        int target = sum - x;
        //处理细节
        if(target < 0) return -1;

        int ret = -1;
        for(int left = 0, right = 0, tmp = 0; right < nums.length; right++)
        {
            tmp += nums[right]; // 进窗口
            while(tmp > target) // 判断
                tmp -= nums[left++]; // 出窗口
            if(tmp == target)
                ret = Math.max(ret,right - left + 1);// 更新结果
        }
        if(ret == -1) return ret;
        else return nums.length - ret;
    }
}




LeetCode904.水果成篮
class Solution {
    public int totalFruit(int[] f) {
        Map<Integer,Integer> hash = new HashMap<Integer,Integer>();//统计窗口水果种类
            int ret = 0;
        for(int left = 0,right = 0; right < f.length; right++)
        {
            int in = f[right];
            hash.put(in,hash.getOrDefault(in,0) + 1);//进窗口
            while(hash.size() > 2)
            {
                int out = f[left];
                hash.put(out,hash.get(out) - 1);//出窗口
                if(hash.get(out) == 0)
                {
                    hash.remove(out);
                }
                left++;
            }
            // 更新结果
            ret = Math.max(ret,right - left + 1);
        }
        return ret;
    }
}


class Solution {
    public int totalFruit(int[] f) {
        int n = f.length;
        int[] hash = new int[n +1];
        int ret = 0;
        for(int left = 0,right = 0,kinds = 0; right < n; right++)
        {
            int in = f[right];
            if(hash[in] == 0)
            {
                kinds++; //维护水果种类
            }
            hash[in]++;//进窗口
            while(kinds > 2)
            {
                int out = f[left];
                hash[out]--;//出窗口
                if(hash[out] == 0)
                {
                    kinds--;
                }
                left++;
            }
            // 更新结果
            ret = Math.max(ret,right - left + 1);
        }
        return ret;
    }
}


LeetCode438.找到字符串中所有字母异位词
class Solution {
    public List<Integer> findAnagrams(String ss, String pp) {
        List<Integer> ret = new ArrayList<Integer>();
        char[] s = ss.toCharArray();
        char[] p = pp.toCharArray();
        int[] hash1 = new int[26]; // 统计字符串p中每一个字符出现的个数
        for(char ch : p)
        {
            hash1[ch - 'a']++;
        }
        int[] hash2 = new int[26];//统计窗口中每个字符出现的个数
        int m = p.length;
        for(int left = 0, right = 0,count = 0;right < s.length;right++)
        {
            char in = s[right];
            hash2[in - 'a']++;
            if(hash2[in - 'a'] <= hash1[in - 'a'])
            {
                count++;// 进窗口 + 维护count变量
            }
            if(right - left + 1 > m)
            {
                char out = s[left++];
                if(hash2[out - 'a']-- <= hash1[out - 'a'])
                {
                    count--;//出窗口 + 维护count
                }
            }
            // 更新hash表
            if(count == m)
            {
                ret.add(left);
            }
        }
        return ret;
    }
}


LeetCode30.串联所有单词的子串
class Solution
{
    public List < Integer > findSubstring(String s, String[] words)
    {
        List < Integer > ret = new ArrayList < Integer > ();
        // 保存字典中所有单词的频次
        Map < String, Integer > hash1 = new HashMap < String, Integer > ();
        for(String str: words) hash1.put(str, hash1.getOrDefault(str, 0) + 1);
        int len = words[0].length(), m = words.length;
        for(int i = 0; i < len; i++) // 执⾏次数
        {
            // 保存窗⼝内所有单词的频次
            Map < String, Integer > hash2 = new HashMap < String, Integer > ();
            for(int left = i, right = i, count = 0; right + len <= s.length(); right += len)
            {
                // 进窗⼝ + 维护 count
                String in = s.substring(right, right + len);
                hash2.put( in , hash2.getOrDefault( in , 0) + 1);
                if(hash2.get( in ) <= hash1.getOrDefault( in , 0)) count++;
                // 判断
                if(right - left + 1 > len * m)
                {
                    // 出窗⼝ + 维护 count
                    String out = s.substring(left, left + len);
                    if(hash2.get(out) <= hash1.getOrDefault(out, 0)) count--;
                    hash2.put(out, hash2.get(out) - 1);
                    left += len;
                }
                // 更新结果
                if(count == m) ret.add(left);
            }
        }
        return ret;
    }
}
